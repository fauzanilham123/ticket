basePath: /v1
definitions:
  entity.Banner:
    properties:
      created_at:
        type: string
      desc:
        type: string
      id:
        type: integer
      img:
        type: string
      slug:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  entity.Event:
    properties:
      created_at:
        type: string
      date:
        type: string
      desc:
        type: string
      id:
        type: integer
      id_promotor_created:
        type: integer
      id_talent:
        type: string
      img_layout:
        type: string
      location:
        type: string
      sk:
        type: string
      tag:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  entity.Talent:
    properties:
      created_at:
        type: string
      id:
        type: integer
      id_promotor_created:
        type: integer
      name:
        type: string
      photo:
        type: string
      updated_at:
        type: string
    type: object
  entity.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      id_customer:
        type: integer
      id_promotor:
        type: integer
      id_type:
        type: integer
      name:
        type: string
      token:
        description: field token
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: This is an API documentation for hepytic.
  title: hepytic
  version: "1.0"
paths:
  /auth/customer/login:
    post:
      description: Login Customer
      parameters:
      - description: email
        in: formData
        name: email
        required: true
        type: string
      - description: password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.User'
            type: array
      summary: Login Customer
      tags:
      - auth
  /auth/customer/register:
    post:
      consumes:
      - multipart/form-data
      description: Register Customer with the given information
      parameters:
      - description: name
        in: formData
        name: name
        required: true
        type: string
      - description: email
        in: formData
        name: email
        required: true
        type: string
      - description: id_type
        in: formData
        name: id_type
        type: string
      - description: id_promotor
        in: formData
        name: id_promotor
        type: string
      - description: password
        in: formData
        name: password
        required: true
        type: string
      - description: gender
        in: formData
        name: gender
        required: true
        type: string
      - description: birthday
        in: formData
        name: birthday
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
      summary: Register Customer
      tags:
      - auth
  /banners/:
    get:
      description: Retrieve a list of all banners
      parameters:
      - description: limit
        in: query
        name: limit
        type: string
      - description: offset
        in: query
        name: offset
        type: string
      - description: order_by
        in: query
        name: order_by
        type: string
      - description: sort
        in: query
        name: sort
        type: string
      - description: Filter by title
        in: query
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Banner'
            type: array
      summary: Get all banners
      tags:
      - banners
    post:
      consumes:
      - multipart/form-data
      description: Create a new banner with the given information
      parameters:
      - description: title of the banner
        in: formData
        name: title
        required: true
        type: string
      - description: slug of the banner
        in: formData
        name: slug
        required: true
        type: string
      - description: desc of the banner
        in: formData
        name: desc
        required: true
        type: string
      - description: Image file to upload
        in: formData
        name: img
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Banner'
      summary: Create a new banner
      tags:
      - banners
  /banners/{id}:
    delete:
      description: Delete a banner by its ID
      parameters:
      - description: Banner ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a banner
      tags:
      - banners
    get:
      description: Retrieve a banner by its ID
      parameters:
      - description: Banner ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Banner'
      summary: Get a banner by ID
      tags:
      - banners
    patch:
      consumes:
      - multipart/form-data
      description: Update a banner by its ID
      parameters:
      - description: Banner ID
        in: path
        name: id
        required: true
        type: string
      - description: title of the banner
        in: formData
        name: title
        required: true
        type: string
      - description: slug of the banner
        in: formData
        name: slug
        required: true
        type: string
      - description: desc of the banner
        in: formData
        name: desc
        required: true
        type: string
      - description: Image file to upload
        in: formData
        name: img
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Banner'
      summary: Update a banner
      tags:
      - banners
  /events/:
    get:
      description: Retrieve a list of all events
      parameters:
      - description: limit
        in: query
        name: limit
        type: string
      - description: offset
        in: query
        name: offset
        type: string
      - description: order_by
        in: query
        name: order_by
        type: string
      - description: sort
        in: query
        name: sort
        type: string
      - description: Filter by id_talent
        in: query
        name: id_talent
        type: string
      - description: Filter by title
        in: query
        name: title
        type: string
      - description: Filter by desc
        in: query
        name: desc
        type: string
      - description: Filter by location
        in: query
        name: location
        type: string
      - description: Filter by sk
        in: query
        name: sk
        type: string
      - description: Filter by tag
        in: query
        name: tag
        type: string
      - description: Filter by id_promotor_created
        in: query
        name: id_promotor_created
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Event'
            type: array
      summary: Get all events
      tags:
      - events
    post:
      consumes:
      - multipart/form-data
      description: Create a new event with the given information
      parameters:
      - description: id_talent of the event
        in: formData
        name: id_talent
        required: true
        type: string
      - description: title of the event
        in: formData
        name: title
        required: true
        type: string
      - description: desc of the event
        in: formData
        name: desc
        required: true
        type: string
      - description: date of the event
        format: date
        in: formData
        name: date
        required: true
        type: string
      - description: location of the event
        in: formData
        name: location
        required: true
        type: string
      - description: sk of the event
        in: formData
        name: sk
        required: true
        type: string
      - description: tag of the event
        in: formData
        name: tag
        required: true
        type: string
      - description: id_promotor_created of the event
        in: formData
        name: id_promotor_created
        required: true
        type: string
      - description: img_layout file to upload
        in: formData
        name: img_layout
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Event'
      summary: Create a new event
      tags:
      - events
  /events/{id}:
    delete:
      description: Delete a event by its ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a event
      tags:
      - events
    get:
      description: Retrieve a event by its ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Event'
      summary: Get a event by ID
      tags:
      - events
    patch:
      consumes:
      - multipart/form-data
      description: Update a event by its ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: id_talent of the event
        in: formData
        name: id_talent
        required: true
        type: string
      - description: title of the event
        in: formData
        name: title
        required: true
        type: string
      - description: desc of the event
        in: formData
        name: desc
        required: true
        type: string
      - description: date of the event
        format: date
        in: formData
        name: date
        required: true
        type: string
      - description: location of the event
        in: formData
        name: location
        required: true
        type: string
      - description: sk of the event
        in: formData
        name: sk
        required: true
        type: string
      - description: tag of the event
        in: formData
        name: tag
        required: true
        type: string
      - description: id_promotor_created of the event
        in: formData
        name: id_promotor_created
        required: true
        type: string
      - description: img_layout file to upload
        in: formData
        name: img_layout
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Event'
      summary: Update a event
      tags:
      - events
  /talents/:
    get:
      description: Retrieve a list of all talents
      parameters:
      - description: limit
        in: query
        name: limit
        type: string
      - description: offset
        in: query
        name: offset
        type: string
      - description: order_by
        in: query
        name: order_by
        type: string
      - description: sort
        in: query
        name: sort
        type: string
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by id_promotor_created
        in: query
        name: id_promotor_created
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Talent'
            type: array
      summary: Get all talents
      tags:
      - talents
    post:
      consumes:
      - multipart/form-data
      description: Create a new talent with the given information
      parameters:
      - description: name of the talent
        in: formData
        name: name
        required: true
        type: string
      - description: id_promotor_created of the talent
        in: formData
        name: id_promotor_created
        required: true
        type: string
      - description: poto file to upload
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Talent'
      summary: Create a new talent
      tags:
      - talents
  /talents/{id}:
    delete:
      description: Delete a talent by its ID
      parameters:
      - description: Talent ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a talent
      tags:
      - talents
    get:
      description: Retrieve a talent by its ID
      parameters:
      - description: Talents ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Talent'
      summary: Get a talent by ID
      tags:
      - talents
    patch:
      consumes:
      - multipart/form-data
      description: Update a talent by its ID
      parameters:
      - description: Talent ID
        in: path
        name: id
        required: true
        type: string
      - description: name of the talent
        in: formData
        name: name
        required: true
        type: string
      - description: id_promotor_created of the talent
        in: formData
        name: id_promotor_created
        required: true
        type: integer
      - description: photo file to upload
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Talent'
      summary: Update a talent
      tags:
      - talents
swagger: "2.0"
